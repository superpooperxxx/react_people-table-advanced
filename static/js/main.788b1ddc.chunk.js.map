{"version":3,"sources":["components/Navbar.tsx","App.tsx","pages/HomePage.tsx","utils/searchHelper.ts","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","components/PersonItem.tsx","components/PeopleTable.tsx","api.ts","utils/getFilteredPeople.ts","pages/PeoplePage.tsx","pages/NotFoundPage.tsx","index.tsx"],"names":["setClasses","isActive","cn","Navbar","className","role","to","App","HomePage","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SEXES","m","f","CENTURIES","PeopleFilters","useSearchParams","searchParams","setSearchParams","query","get","centuries","getAll","sex","onSexChange","newSex","onCenturiesChange","century","includes","filter","ch","search","map","param","text","type","placeholder","onChange","event","params","setSearchWith","target","length","Loader","PersonLink","person","useLocation","slug","name","PersonItem","mother","father","selectedUser","useParams","born","died","motherName","fatherName","findPerson","people","personName","find","COLUMNS","PeopleTable","filteredPeople","sort","order","newSort","sortType","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","setPeople","isLoading","setIsLoading","isLoadingError","setIsLoadingError","filters","preparedQuery","trim","toLowerCase","preparedName","preparedMotherName","preparedFatherName","centuryBorn","String","Math","floor","a","b","localeCompare","reverse","getFilteredPeople","useEffect","getPeople","catch","finally","NotFoundPage","createRoot","document","getElementById","render","path","element","index","replace"],"mappings":"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","file":"static/js/main.788b1ddc.chunk.js","sourcesContent":["import cn from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst setClasses = ({ isActive }: { isActive: boolean }) => cn('navbar-item', {\n  'has-background-grey-lighter': isActive,\n});\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink className={setClasses} to=\"/\">Home</NavLink>\n\n          <NavLink\n            aria-current=\"page\"\n            className={setClasses}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const HomePage = () => <h1 className=\"title\">Home Page</h1>;\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import cn from 'classnames';\nimport { useSearchParams, Link } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\nconst SEXES = {\n  m: 'Male',\n  f: 'Female',\n};\nconst CENTURIES = ['16', '17', '18', '19', '20'];\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const sex = searchParams.get('sex') || '';\n\n  const setSearchWith = (params: SearchParams) => {\n    const search = getSearchWith(searchParams, params);\n\n    setSearchParams(search);\n  };\n\n  const onSexChange = (newSex: string | null) => {\n    if (sex === null) {\n      return getSearchWith(searchParams, { newSex: null });\n    }\n\n    return getSearchWith(searchParams, { sex: newSex });\n  };\n\n  const onQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchWith({ query: event.target.value || null });\n  };\n\n  const onCenturiesChange = (century: string | null) => {\n    if (century === null) {\n      return getSearchWith(searchParams, {\n        centuries: null,\n      });\n    }\n\n    return getSearchWith(searchParams, {\n      centuries: centuries.includes(century)\n        ? centuries.filter(ch => ch !== century)\n        : [...centuries, century],\n    });\n  };\n\n  const onResetAll = () => {\n    return getSearchWith(new URLSearchParams(), {});\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <Link\n          to={{ search: onSexChange(null) }}\n          className={cn({\n            'is-active': !sex,\n          })}\n        >\n          All\n        </Link>\n\n        {Object.entries(SEXES).map(([param, text]) => (\n          <Link\n            to={{ search: onSexChange(param) }}\n            className={cn({\n              'is-active': sex === param,\n            })}\n          >\n            {text}\n          </Link>\n        ))}\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={onQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURIES.map(century => (\n              <Link\n                key={century}\n                data-cy=\"century\"\n                className={cn('button mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n                to={{ search: onCenturiesChange(century) }}\n              >\n                {century}\n              </Link>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <Link\n              data-cy=\"centuryALL\"\n              className={cn('button is-success', {\n                'is-outlined': centuries.length,\n              })}\n              to={{ search: onCenturiesChange(null) }}\n            >\n              All\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <Link\n          className=\"button is-link is-outlined is-fullwidth\"\n          to={{ search: onResetAll() }}\n        >\n          Reset all filters\n        </Link>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import cn from 'classnames';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { search } = useLocation();\n\n  return (\n    <Link\n      to={`/people/${person.slug + search}`}\n      className={cn({\n        'has-text-danger': person.sex === 'f',\n      })}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { useParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\n\ntype Props = {\n  person: Person,\n  mother: Person | null,\n  father: Person | null,\n};\n\nexport const PersonItem: React.FC<Props> = ({ person, mother, father }) => {\n  const { selectedUser } = useParams();\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={cn({\n        'has-background-warning': person.slug === selectedUser,\n      })}\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      <td>\n        {mother\n          ? (<PersonLink person={mother} />)\n          : (person.motherName || '-')}\n      </td>\n      <td>\n        {father\n          ? (<PersonLink person={father} />)\n          : (person.fatherName || '-')}\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { PersonItem } from './PersonItem';\nimport { getSearchWith } from '../utils/searchHelper';\n\ntype Props = {\n  people: Person[],\n  filteredPeople: Person[],\n};\n\nconst findPerson = (people: Person[], personName: string | null) => {\n  return people.find(person => person.name === personName) || null;\n};\n\nconst COLUMNS = {\n  name: 'Name',\n  sex: 'Sex',\n  born: 'Born',\n  died: 'Died',\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people, filteredPeople }) => {\n  const [searchParams] = useSearchParams();\n\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  const onSortChange = (newSort: string) => {\n    if (sort !== newSort) {\n      return getSearchWith(searchParams, { sort: newSort, order: null });\n    }\n\n    if (sort && !order) {\n      return getSearchWith(searchParams, { sort: newSort, order: 'desc' });\n    }\n\n    return getSearchWith(searchParams, { sort: null, order: null });\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {Object.entries(COLUMNS).map(([sortType, text]) => (\n            <th key={sortType}>\n              <span className=\"is-flex is-flex-wrap-nowrap\">\n                {text}\n                <Link to={{\n                  search: onSortChange(sortType),\n                }}\n                >\n                  <span className=\"icon\">\n                    <i className={cn('fas', {\n                      'fa-sort': sort !== sortType,\n                      'fa-sort-up': sort === sortType && !order,\n                      'fa-sort-down': sort === sortType && order === 'desc',\n                    })}\n                    />\n                  </span>\n                </Link>\n              </span>\n            </th>\n          ))}\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {filteredPeople.map(person => {\n          const mother = findPerson(people, person.motherName);\n          const father = findPerson(people, person.fatherName);\n\n          return (\n            <PersonItem\n              key={person.slug}\n              person={person}\n              mother={mother}\n              father={father}\n            />\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { Person } from '../types';\n\nexport const getFilteredPeople = (\n  people: Person[],\n  filters: URLSearchParams,\n) => {\n  let filteredPeople = [...people];\n\n  const query = filters.get('query') || '';\n  const centuries = filters.getAll('centuries') || [];\n  const sex = filters.get('sex') || '';\n  const sort = filters.get('sort') || '';\n  const order = filters.get('order') || '';\n\n  if (query) {\n    const preparedQuery = query.trim().toLowerCase();\n\n    filteredPeople = filteredPeople.filter(person => {\n      const preparedName = person.name.toLowerCase();\n      const preparedMotherName = person.motherName?.toLowerCase();\n      const preparedFatherName = person.fatherName?.toLowerCase();\n\n      return (preparedName.includes(preparedQuery)\n        || preparedMotherName?.includes(preparedQuery)\n        || preparedFatherName?.includes(preparedQuery));\n    });\n  }\n\n  if (centuries.length) {\n    filteredPeople = filteredPeople.filter(person => {\n      const centuryBorn = String(Math.floor(person.born / 100) + 1);\n\n      return centuries.includes(centuryBorn);\n    });\n  }\n\n  if (sex) {\n    filteredPeople = filteredPeople.filter(person => person.sex === sex);\n  }\n\n  filteredPeople.sort((a, b) => {\n    switch (sort) {\n      case 'name':\n      case 'sex':\n        return a[sort].localeCompare(b[sort]);\n      case 'born':\n      case 'died':\n        return a[sort] - b[sort];\n      default:\n        return 0;\n    }\n  });\n\n  if (order === 'desc') {\n    filteredPeople.reverse();\n  }\n\n  return filteredPeople;\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from '../components/PeopleFilters';\nimport { Loader } from '../components/Loader';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { getFilteredPeople } from '../utils/getFilteredPeople';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isLoadingError, setIsLoadingError] = useState(false);\n  const [searchParams] = useSearchParams();\n\n  const filteredPeople = getFilteredPeople(people, searchParams);\n\n  useEffect(() => {\n    getPeople()\n      .then(setPeople)\n      .catch(() => {\n        setIsLoadingError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {!isLoading && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <>\n                  {isLoadingError && (\n                    <p data-cy=\"peopleLoadingError\">Something went wrong</p>\n                  )}\n\n                  {!people.length && (\n                    <p data-cy=\"noPeopleMessage\">\n                      There are no people on the server\n                    </p>\n                  )}\n\n                  {!filteredPeople.length && (\n                    <p>\n                      There are no people matching the current search criteria\n                    </p>\n                  )}\n\n                  {filteredPeople.length !== 0 && (\n                    <PeopleTable\n                      people={people}\n                      filteredPeople={filteredPeople}\n                    />\n                  )}\n                </>\n              )}\n\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","export const NotFoundPage = () => <h1 className=\"title\">Page not found</h1>;\n","import { createRoot } from 'react-dom/client';\nimport {\n  HashRouter as Router, Routes, Route, Navigate,\n} from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { HomePage } from './pages/HomePage';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement).render(\n  <Router>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<HomePage />} />\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n\n        <Route path=\"people\">\n          <Route index element={<PeoplePage />} />\n          <Route path=\":selectedUser\" element={<PeoplePage />} />\n        </Route>\n\n        <Route path=\"*\" element={<NotFoundPage />} />\n      </Route>\n    </Routes>\n  </Router>,\n);\n"],"sourceRoot":""}